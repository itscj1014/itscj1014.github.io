<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis 集群</title>
    <url>/posts/174793d2.html</url>
    <content><![CDATA[<p>然后我们在s1目录创建一个sentinel.conf文件，添加下面的内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">port 27001</span><br><span class="line">sentinel announce-ip 192.168.150.101</span><br><span class="line">sentinel monitor mymaster 192.168.150.101 7001 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line">sentinel failover-timeout mymaster 60000</span><br><span class="line">dir &quot;/tmp/s1&quot;</span><br></pre></td></tr></table></figure>

<p>解读：</p>
<ul>
<li><code>port 27001</code>：是当前sentinel实例的端口</li>
<li><code>sentinel monitor mymaster 192.168.150.101 7001 2</code>：指定主节点信息<ul>
<li><code>mymaster</code>：主节点名称，自定义，任意写</li>
<li><code>192.168.150.101 7001</code>：主节点的ip和端口</li>
<li><code>2</code>：选举master时的quorum值</li>
</ul>
</li>
</ul>
<span id="more"></span>

<p>然后将s1&#x2F;sentinel.conf文件拷贝到s2、s3两个目录中（在&#x2F;tmp目录执行下列命令）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一：逐个拷贝</span></span><br><span class="line"><span class="built_in">cp</span> s1/sentinel.conf s2</span><br><span class="line"><span class="built_in">cp</span> s1/sentinel.conf s3</span><br><span class="line"><span class="comment"># 方式二：管道组合命令，一键拷贝</span></span><br><span class="line"><span class="built_in">echo</span> s2 s3 | xargs -t -n 1 <span class="built_in">cp</span> s1/sentinel.conf</span><br></pre></td></tr></table></figure>



<p>修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sed -i -e <span class="string">&#x27;s/27001/27002/g&#x27;</span> -e <span class="string">&#x27;s/s1/s2/g&#x27;</span> s2/sentinel.conf</span><br><span class="line">sed -i -e <span class="string">&#x27;s/27001/27003/g&#x27;</span> -e <span class="string">&#x27;s/s1/s3/g&#x27;</span> s3/sentinel.conf</span><br></pre></td></tr></table></figure>



<h2 id="3-3-启动"><a href="#3-3-启动" class="headerlink" title="3.3.启动"></a>3.3.启动</h2><p>为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第1个</span></span><br><span class="line">redis-sentinel s1/sentinel.conf</span><br><span class="line"><span class="comment"># 第2个</span></span><br><span class="line">redis-sentinel s2/sentinel.conf</span><br><span class="line"><span class="comment"># 第3个</span></span><br><span class="line">redis-sentinel s3/sentinel.conf</span><br></pre></td></tr></table></figure>



<p>启动后：</p>
]]></content>
      <categories>
        <category>Redis</category>
        <category>分类一</category>
        <category>分类二</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>标签一</tag>
        <tag>标签二</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>使用递归方法来反转链表也很直观。递归的思想是将问题分解成更小的子问题，直到问题足够简单时直接解决，然后逐层返回并合并结果。</p>
<h3 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h3><ol>
<li><strong>递归终止条件：</strong> 当链表为空或者只有一个节点时，直接返回该节点。</li>
<li><strong>递归处理：</strong> 假设我们已经反转了 <code>head.next</code> 后面的部分，现在需要把当前节点 <code>head</code> 接到反转后的链表的末尾。</li>
<li><strong>调整指针：</strong> 将 <code>head.next.next</code> 指向 <code>head</code>，然后将 <code>head.next</code> 置为 <code>null</code>。</li>
<li><strong>返回新链表头：</strong> 每一层递归返回新的链表头。</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>以下是详细的 Java 代码实现，并附有注释解释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义链表节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="type">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归终止条件：当链表为空或只有一个节点时，返回该节点</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归反转后续节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将当前节点连接到反转后的链表尾部</span></span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回新的链表头</span></span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建测试用链表：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反转链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">result</span> <span class="operator">=</span> solution.reverseList(head);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果链表</span></span><br><span class="line">        <span class="keyword">while</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(result.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            result = result.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出应该是：5 4 3 2 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol>
<li><p><strong>递归终止条件：</strong></p>
<ul>
<li><code>if (head == null || head.next == null) &#123; return head; &#125;</code><br>当链表为空或者只有一个节点时，直接返回当前节点。</li>
</ul>
</li>
<li><p><strong>递归处理：</strong></p>
<ul>
<li><code>ListNode newHead = reverseList(head.next);</code><br>递归反转从 <code>head.next</code> 开始的子链表，<code>newHead</code> 是反转后的新链表头。</li>
</ul>
</li>
<li><p><strong>调整指针：</strong></p>
<ul>
<li><code>head.next.next = head;</code> 将 <code>head</code> 接到反转后的链表末尾。</li>
<li><code>head.next = null;</code> 将当前节点的 <code>next</code> 指针置为空，避免形成环。</li>
</ul>
</li>
<li><p><strong>返回新链表头：</strong></p>
<ul>
<li><code>return newHead;</code> 返回新的链表头。</li>
</ul>
</li>
</ol>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul>
<li><strong>时间复杂度：</strong> O(n)。每个节点被访问一次。</li>
<li><strong>空间复杂度：</strong> O(n)。由于递归调用的栈深度为 <code>n</code>，需要 <code>O(n)</code> 的栈空间。</li>
</ul>
<h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p>假设链表为：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</p>
<ol>
<li><p>第一次递归：</p>
<ul>
<li>递归调用 <code>reverseList(2 -&gt; 3 -&gt; 4 -&gt; 5)</code></li>
<li>返回 <code>5 -&gt; 4 -&gt; 3 -&gt; 2</code></li>
</ul>
</li>
<li><p>第二次递归：</p>
<ul>
<li>递归调用 <code>reverseList(3 -&gt; 4 -&gt; 5)</code></li>
<li>返回 <code>5 -&gt; 4 -&gt; 3</code></li>
</ul>
</li>
<li><p>第三次递归：</p>
<ul>
<li>递归调用 <code>reverseList(4 -&gt; 5)</code></li>
<li>返回 <code>5 -&gt; 4</code></li>
</ul>
</li>
<li><p>第四次递归：</p>
<ul>
<li>递归调用 <code>reverseList(5)</code></li>
<li>返回 <code>5</code></li>
</ul>
</li>
<li><p>调整指针：</p>
<ul>
<li>将 <code>4</code> 指向 <code>3</code>，将 <code>3</code> 指向 <code>2</code>，将 <code>2</code> 指向 <code>1</code></li>
</ul>
</li>
</ol>
<p>最后返回反转后的链表头 <code>5</code>。</p>
<p>通过这种递归方法，我们可以有效地反转链表。递归方法利用了函数调用栈，代码简洁且易于理解。</p>
<p><img src="https://gitee.com/van14/image/raw/master/img/202407120424932.png" alt="image-20240712042419865"></p>
]]></content>
      <categories>
        <category>Redis</category>
        <category>锁</category>
        <category>分类一</category>
        <category>分类三</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>标签一</tag>
        <tag>标签二</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>再次测试图片以及分级功能</title>
    <url>/posts/b046a95c.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />



<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="第一节前言"><a href="#第一节前言" class="headerlink" title="第一节前言"></a>第一节前言</h2><p>本文我将分享给大家一套我自己使用良久并觉得非常高效的 <code>学习论</code>，它可以运用到 Leetcode 上的刷题，也可以 generalize 到生活中涉及到学习以及记忆的方方面面。当然，本文将以 Leetcode 刷题为 case study 去进行讲解。 更具体一点, <code>我会教大家如何运用该学习论在 4 个月的时间内从 0 算法基础到实打实刷满 500 道题，并且形成长期记忆，同时具备高效解决各种同类型题目的能力。</code></p>
<h2 id="第二节自我介绍"><a href="#第二节自我介绍" class="headerlink" title="第二节自我介绍"></a>第二节自我介绍</h2><p>我是 <code>Eason</code>, 是一名现在就读于 CMU， CS 院 AI 相关 Master 的研二学生。在我的求职备战期间，我是一名忠实的 Leetcode 用户，并最终凭借 Leetcode 这个平台给予的各方面帮助和资源拿到了<code>北美 Facebook (Meta) 的 Full-Time Offer</code>。时隔数月，我怀着一颗感恩的心回到这里，希望可以给大家分享下自己在 4 个月的备战期间积累的一些个人经验，尽可能地帮助大家少走弯路。<code>本文篇幅较长，但诚意满满，力求字里行间具有逻辑性, 连贯性以及可读性。</code></p>
<img src="https://gitee.com/van14/image/raw/master/img/202407120727028.png" alt="image-20240712072707957" style="zoom:50%;" />







<h1 id="第二章刷题时间线"><a href="#第二章刷题时间线" class="headerlink" title="第二章刷题时间线"></a>第二章刷题时间线</h1><h2 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h2><p>我准备刷题的时间点非常晚 ( Master 第一年全部用来刷 GPA 了，没有做任何面试准备，甚至没有实习, 现在回首坦诚地讲有一丝后悔)。真正开始有规律地准备刷题大概是在第二年的 7 月到 10 月这四个月的时间，<code>这四个月我在 Leetcode 上大概有 4500 个左右的 commits，总共 solve 约 550 道题 (难度分布大概是 4 : 6 : 1)</code>, 11 月则是几乎全部用来巩固旧题，进行各种面试前的最后冲刺。</p>
<img src="https://cdn.nlark.com/yuque/0/2024/png/1692430/1720061132328-b3fcb456-e92c-4152-a2f8-48db8c94576d.png?x-oss-process=image%2Fformat%2Cwebp" alt="image.jpg" style="zoom:75%;" />





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 短期记忆: 持续若干天或者一两周的记忆 </span><br><span class="line">(2) 中期记忆: 持续数周或者几个月的记忆 </span><br><span class="line">(3) 长期记忆: 持续数年甚至永世不会消逝的记忆。</span><br></pre></td></tr></table></figure>

<p>学习某项技能 (包括刷题)，其终极目标往往是去形成<code>长期记忆</code>，因为它的价值最高，一旦获取便往往很难再遗失。换言之，一旦你会做一道或者一类题目之后，你或许永远都会做。文章开头讨论的 <code>&quot;题海流&quot;</code> 帮助形成的往往是<code>短期记忆</code> – 价值最低的记忆，而把后面探讨的 <code>&quot;归纳流&quot;</code> 加上这个 section 即将介绍的<code>记忆方法</code>综合运用在一起，则是为了帮助形成长期记忆 – 价值连城的记忆。</p>
<p>形成长期记忆的方法其实非常简单，即 <strong>频繁且有效的重复刺激</strong>。人们永远不会忘记的总是那些需要不断重复的东西: 怎么用筷子吃饭，怎么穿衣装扮，怎么说某种语言等等。之所以永远不会忘记它们，正是因为我们每天都在潜移默化地反复刺激大脑如何去运用它们，而刷题或者 generalize 到学习某项技能亦是如此。因此，这里可以总结出另外一个结论: <code>复习旧题的重要性要远远大于做新题</code>。这一点其实和我们之前讨论的内容相互佐证，彼此呼应。</p>
<p>那么该如何高效地复习并且形成价值最高的长期记忆呢？这里不得不提一下非常知名的<code>艾宾浩斯遗忘曲线</code>了。</p>
<p>德国的心理学家艾宾浩斯告诉我们，人对于知识的遗忘速度遵循 <strong>“先快后慢”</strong> 的原则。学得的知识在一天后，如不抓紧复习，很快就只剩下原来的 25%。而随着时间的推移，遗忘的速度会减慢，遗忘的数量也就减少。去有效抵抗这种遗忘现象，最好的办法就是进行有规律的复习 (每 5 分钟，30分钟，12小时，1天，2天，4天，7天，15天，1个月，3个月，6个月)。</p>
<p>然而私认为这个划分有些过细了，读者可以结合自身的情况进行调整。我个人的复习规律是 <code>每 2 小时，12小时， 2天， 7天，15天，一个月， 三个月</code>。 <strong>这也是为什么我在上文提及到我会将一天分为早上, 中午和晚上三个学习区段，每一个区段只刷很少数量的题 (1 ~ 2题)，并且开始每一个区段之前，都会首先复习之前做过的题，晚上的时候甚至一题也不做，将全部精力都用来复习。</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/1692430/1720061132308-4c40054f-aa3a-41ac-b124-a34aca57dafc.png" alt="img"></p>
<p>令我感到吃惊的是，在运用这一套记忆方法仅仅数周之后，我就发现我的记忆相对于之前来比变得 <code>异常牢固，坚不可摧</code>, 碰到之前做过的题目可以像哈希表一样用 O(1) 的时间做出响应。当时甚至还和朋友戏谑到感觉自己已经可以开始用 <code>&quot;脊柱做题&quot;</code>。 比如在 Facebook 的面试里我就遇见了共三道之前训练过的题，对于它们，我思考加上写完的时间平均下来大约只有 3 ~ 4 分钟。再结合运用之前介绍的 <code>归纳法</code>，我同时也具备了一定的 generalization 的能力。<code>所以遇见同类型的题目，即便不可以在有限时间内 bug-free 的写完 (比如我面试的最后一道 hard 题 282)，也能做个八九不离十, 并且把思路讲得非常清楚 (而这往往是很多公司更为看重的)。</code></p>
<p>注意，这里并不是想要鼓励大家去 <code>背题</code>，面试当中遇见原题更像是一种面试官对你的恩赐，可遇而不可求。正确的期待应当是默认每一道题都是 “新题”。这里的 “新题” 之所以带引号是因为严格意义上的新题很少存在，它们大概率只是之前训练过的一类题中的一个变种。<strong>而这一基本事实和机器学习领域的训练模型极为相似</strong>。去训练一个模型之前，我们通常先将数据分为 <code>训练集</code> 和 <code>测试集</code>。我们用训练集去训练模型就好似我们在 Leetcode 上刷题一样，其目的是去增加知识储备的 <code>广度和深度</code>。而用测试集去对 “新事物” 进行预测就可类比成面试官拿 “新题” 测试我们。训练模型这一过程就好似刷题的归纳总结，你归纳的越好，你的拟合性以及性能就越强。<code>这里再一次强调归纳总结的重要性</code>: 不要成为一个只会背诵训练集的劣质模型，尝试去理解和归纳你手中的 “数据”，<strong>时间足够长了, 你或许会发现这世上再无新题。</strong></p>
<p>这套根据个体记忆规律量身定做的复习方法虽然功效异常强大，但想要长期的坚持却需要非常强大的毅力和自制力 (最后一个 section 我会着重讨论如何锻炼它们)。下面给大家 share 一份 <code>艾宾浩斯记忆曲线的 excel 表格</code>， 大家下载后可以结合自身的记忆规律进行改进 <strong>(PS: 不知道什么原因, 现在好像不支持网页跳转了，如果点击 link 后报 404, 直接复制 URL 到浏览器打开即可)。</strong><br><a href="https://leetcode.cn/link/?target=http://www.xuexili.com/jiyili/1351.html">艾宾浩斯记忆曲线 excel 表格</a><br>(<a href="https://leetcode.cn/link/?target=http://www.xuexili.com/jiyili/1351.html">http://www.xuexili.com/jiyili/1351.html</a>)</p>
<p>同时也 share 给大家一份我个人强烈推荐并自己也在使用的 track 自己刷题进程的 <code>Notion 模板。</code><br><a href="https://leetcode.cn/link/?target=https://cyber-nannyberry-6da.notion.site/03346a1e6816484bb8a8d12a62158270?v=67a25588672d4ff8a20c9a4e9edee1c5">Notion Track 刷题进展模板</a><br>(<a href="https://leetcode.cn/link/?target=https://cyber-nannyberry-6da.notion.site/03346a1e6816484bb8a8d12a62158270?v=67a25588672d4ff8a20c9a4e9edee1c5">https://cyber-nannyberry-6da.notion.site/03346a1e6816484bb8a8d12a62158270?v=67a25588672d4ff8a20c9a4e9edee1c5</a>)</p>
<p>模板当前风格如下 (我会着重记录自己对于每一道题目的掌握情况), 建议读者根据自身情况进行调整:<br><img src="https://cdn.nlark.com/yuque/0/2024/png/1692430/1720061132434-0490c583-8710-44d0-b6a2-55e89ee6dad8.png" alt="img"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/1692430/1720061133079-8169dc25-2382-4966-a76a-e1bd910e50ac.png" alt="img"></p>
<p>最后 share 的是一个在 Youtube 收获 <code>1700 万观看量</code> 的探讨学习方法的 lecture, 其部分核心思想我已经在本文囊括，但依然建议每当自己又变得迷茫时反复观看，认真消化。<br><a href="https://leetcode.cn/link/?target=https://www.youtube.com/watch?v=IlU-zDU6aQ0&t=793s">Study less, study smart</a></p>
<p><strong>以上 share 的这些资料建议大家结合自己的习惯搭配使用，它们真的可以起到事半功倍的效果哦！</strong></p>
<h2 id="Section-4-拥抱孤独-过滤外界杂音-平稳心态"><a href="#Section-4-拥抱孤独-过滤外界杂音-平稳心态" class="headerlink" title="Section 4: 拥抱孤独, 过滤外界杂音, 平稳心态"></a>Section 4: 拥抱孤独, 过滤外界杂音, 平稳心态</h2><p>遗憾的是，光有一套系统的学习 (刷题) 方法依然是不够的，如何调节自己的心态并使之始终平稳，对于跨度数月之长的备战期来说甚至显得更为重要。我平稳自身心态的办法有两点:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 拥抱孤独</span><br><span class="line">(2) 过滤外界杂音</span><br></pre></td></tr></table></figure>

<p>这里的拥抱孤独，不是要教唆大家去成为一个孤独的人，而是想要去强调 <code>孤独实际是人与生俱来的一种属性，我们要做的不是去逃避它，而是去接纳它</code>。很多小伙伴在备战期间都会因为孤独感而乱了心神，必须要加入各种刷题打卡群，相互监督群才能放心。<code>然而这种 &quot;放心&quot; 本质上却是虚假的，不可靠的</code>。我起初的时候也加了很多各式各样的群，削尖脑袋试图 “融入” 某个群体从而得到特殊的庇护，但到头来只会发现绝大部分的这种群除了带来无谓的焦虑外，很难起到丁点正面作用。<code>直到后来方才发现自己的孤独感反而可以有效利用成为自身最强大的武器</code>。</p>
<p>对于做算法题这种需要投入大量精力去思考的 task 而言，独立思考的能力往往大于一切。对于之前介绍的 <code>归纳法</code> 而言更是如此，你更多需要倾听的是自己内心的声音，你想要总结的也是那些属于自己的思维框架。这通过把希望寄托于各种陌生人刷题群是很难实现的。然而, 我并非暗示大家不要去学习他人的东西。事实恰恰相反，别人好的题解，好的文章我们更要认真的去研读，这就和做发明一样，很多伟大的发明实际上都是基于前人的方法上加以改进而得出的，但这丝毫不影响它们的伟大。因此，我想要表达的是希望大家不要从<code>主观意识</code>上抗拒自身的孤独感并不断地寻找庇护。<strong>你不需要任何庇护，至少对刷算法题这件事而言，倘若你能运用好 Leetcode 社区提供的资源，不断强大自身的毅力和信心，再配合使用本文介绍的学习论，你已经完全具备打败它的一切潜质。</strong></p>
<p>拥抱孤独的另外一个好处就是可以帮助我们 <code>过滤外界杂音</code>。<strong>在之前长达四个月的备战期间，我曾选择近乎彻底地不再登录自己的微信以及各大社交平台。其目的只有一个，那就是抗噪。</strong> 没错，我们不得不承认互联网给当今这个社会带来了种种便利，但也不得不承认如今的互联网是聒噪的，各种社交平台尤甚。里面充斥着各种散播焦虑，攀比和凡尔赛的言论，以及花样繁多的各种洗脑广告和文章。稍有不慎，你就会被 “污染”，你就会<code>潜意识地</code>跟着大众做那些大众认为<code>正确的事情</code>, 而丧失了自己独立思考的能力。别人买房，不代表你也要买房; 别人买车学车，不代表你也要买车学车; 别人炒股，不代表你也要炒股; <strong>别人做任何他们想做的事情都跟你无关，老天赐予你的原本是一个独特而有趣的灵魂，但当有一天你的意识被你口中的 “别人” 所左右之时，你最宝贵的</strong> <code>**独特性**</code><strong>也将不复存在。</strong></p>
<p>因此，不要再沉迷于各种 <code>伪群体</code>, <code>伪社区</code>, <code>洗脑短视频</code> 之间，最好的方式就是离开它们，或者有效控制它们，从而捍卫你的<code>初心</code>。那么什么样的状态或者是心态可以称之为平稳呢？私认为只要你可以做到 <code>长时间地保持一个节奏，贯彻一个方案，不因取得阶段性成就而大喜，亦不因遭受阶段性挫折而大悲，心静如水，那么你离你的目标就真的不再遥远了。</code></p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>以上就是我想要分享给大家的全部内容。人生苦短，能在有限之人生长期坚持一件事情并将其做好实属不易。刷题之路长路漫漫，我真诚的希望大家能够稳住自己的心态，隔离外界的干扰，用最科学和最高效的方法去学习，当你未来回首之际，你将会发现自己从中受益无穷。马上暑假就要来临了，下一届秋招早已迫在眉睫，各位朋友们，倘若此时不动，敢问各位又更待何时呢？</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>测试图片</title>
    <url>/posts/8bf59925.html</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />



<h1 id="测试图片显示"><a href="#测试图片显示" class="headerlink" title="测试图片显示"></a>测试图片显示</h1><p>这是一个测试图片显示的问题。</p>
<img src="https://gitee.com/van14/image/raw/master/img/202407120708678.jpeg"/>





<p><img src="https://gitee.com/van14/image/raw/master/img/202407120706898.jpeg"></p>
<p><img src="https://gitee.com/van14/image/raw/master/img/202407120646802.png" alt="image-20240712064658756"></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁</title>
    <url>/posts/4eb3381c.html</url>
    <content><![CDATA[<h2 id="第一"><a href="#第一" class="headerlink" title="第一"></a>第一</h2><p>为了避免Redis实现的分布式锁超时，Redisson中引入了watch dog的机制，他可以帮助我们在Redisson实例被关闭前，不断的延长锁的有效期。 <strong>自动续租</strong>：当一个Redisson客户端实例获取到一个分布式锁时，如果没有指定锁的超时时间，Watchdog会基于Netty的时间轮启动一个后台任务，定期向Redis发送命令，重新设置锁的过期时间，通常是锁的租约时间的1&#x2F;3。这确保了即使客户端处理时间较长，所持有的锁也不会过期。 <strong>续期时长</strong>：默认情况下，每10s钟做一次续期，续期时长是30s。 <strong>停止续期</strong>：当锁被释放或者客户端实例被关闭时，Watchdog会自动停止对应锁的续租任务。</p>
<p><strong>当我们加锁时，如果指定了<strong><strong>分布式锁</strong></strong>的超时时间，那么是不会开启看门狗逻辑</strong></p>
<p>什么情况下会停止续约：</p>
<p>释放锁的时候，会消费定时任务，停止续约，如果线程被中断了，也会停止续约</p>
<p>但是需要注意的是，Redisson的续期是Netty的时间轮（TimerTask、Timeout、Timer）的，并且操作都是基于JVM的，所以，<strong>当应用宕机、下线或者重启后，续期任务就没有了。这样也能在一定程度上避免机器挂了但是锁一直不释放导致的<strong><strong>死锁</strong></strong>问题</strong></p>
<p>watchdog解锁失败，会不会导致一直续期下去？</p>
<p><strong>不会的，因为在解锁过程中，不管是解锁失败了，还是解锁时抛了异常，都还是会把本地的续期任务停止，避免下次续期。</strong></p>
<p>只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的：</p>
<span id="more"></span>

<p>缺点：</p>
<ul>
<li>可读性差</li>
<li>内存占用较大</li>
</ul>
<p><img src="https://txyj7dhwr4w.feishu.cn/space/api/box/stream/download/asynccode/?code=ODZiNDUyNGYwZGM2YjJmMzQzMDI5YTMzZWU1MTIxNWVfTmthU0hmZlZNbjFZZXRmMUtKMFByVjBRRDc3M0pJSjVfVG9rZW46RnpXZWIxalVYb2ZqZDF4VDF4YmM3Q0FDblRnXzE3MjA3MzQzOTc6MTcyMDczNzk5N19WNA" alt="img"></p>
<p>所以自定义RedisTemplate的序列化方式：</p>
<h2 id="第二"><a href="#第二" class="headerlink" title="第二"></a>第二</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 创建JSON序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> </span><br><span class="line">                               <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// 设置Key的序列化</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置Value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testSer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;可爱&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;12233@qq.com&quot;</span>);</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;user:100&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;user:100&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://txyj7dhwr4w.feishu.cn/space/api/box/stream/download/asynccode/?code=YWFhYWUwNDBmZmQzMzJjYTM0ZDIxM2E4NDE3ZjRiOTNfNVRCdm1HVTZraFVqdnBvdFJESGRIM0dISW5aRzBWMGFfVG9rZW46Vm9NV2J5VjY1b0lhc3R4ODhqRmN2SDNabnpsXzE3MjA3MzQzOTc6MTcyMDczNzk5N19WNA" alt="img"></p>
<p>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中<strong>记录了<strong><strong>序列化</strong></strong>时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的<strong><strong>内存</strong></strong>开销。</strong></p>
<h2 id="第三StringRedisTemplate"><a href="#第三StringRedisTemplate" class="headerlink" title="第三StringRedisTemplate"></a>第三StringRedisTemplate</h2><p>为了节省内存空间，我们可以不使用JSON序列化器来处理value，而是<strong>统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化</strong></p>
<p>使用 Jackson 手动序列化和反序列化</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">// 序列化</span><br><span class="line">String json = mapper.writeValueAsString(someObject);</span><br><span class="line">// 反序列化</span><br><span class="line">MyObject obj = mapper.readValue(json, MyObject.class);</span><br></pre></td></tr></table></figure>

<p>因为存入和读取时的序列化及反序列化都是我们自己实现的，SpringDataRedis就不会将class信息写入Redis了。</p>
<p><img src="https://txyj7dhwr4w.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjBiOGY3ODE4Y2YwZjdhZWNiODZmNWUyOWM1YjFmNjFfQkI2Q3Q4NnJCS0xveUFzNE5xejZHTWRvZHEzdHVrU2NfVG9rZW46TDhoY2JibGxyb2VYakF4MHBoOGNxZXU5bkRkXzE3MjA3MzQzOTc6MTcyMDczNzk5N19WNA" alt="img"></p>
<p>SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式</p>
<p>省去了我们自定义RedisTemplate的序列化方式的步骤，而是直接使用</p>
<p><img src="https://txyj7dhwr4w.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGVhZjZkMmVlYWNmNDFkY2ExMDRjNTBiZDQ4ODJiODBfWUlVd2FIU2xRZU5mWHZxV2dSU25sdkNrbWc2RXlnWkVfVG9rZW46QmV5TmJxTlZsb0VVY1l4akV2c2NQdXNqbkNlXzE3MjA3MzQzOTc6MTcyMDczNzk5N19WNA" alt="img"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON序列化工具</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;清凉&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">12</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;544545@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//手动序列化</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:99&quot;</span>, json);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonUser</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:99&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.readValue(jsonUser, User.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;user1 = &quot;</span> + user1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://txyj7dhwr4w.feishu.cn/space/api/box/stream/download/asynccode/?code=OGFjNzliMjNkZDUxY2JhOWI2NzhjNTY1M2RlMDRiMDBfNE9sSXU5RGpPUVhVU3Fja0lMR3NrUE5rekRhTkZjZnBfVG9rZW46UkZURWJaMzBEb01iWUF4Zm56OGMyOWNMblFlXzE3MjA3MzQzOTc6MTcyMDczNzk5N19WNA" alt="img"></p>
]]></content>
      <categories>
        <category>Redis</category>
        <category>锁</category>
        <category>分类一</category>
        <category>分类二</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>标签一</tag>
        <tag>分布式锁</tag>
        <tag>标签三</tag>
      </tags>
  </entry>
</search>
