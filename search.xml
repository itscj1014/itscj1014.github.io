<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/undefined/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<p>使用递归方法来反转链表也很直观。递归的思想是将问题分解成更小的子问题，直到问题足够简单时直接解决，然后逐层返回并合并结果。</p>
<h3 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h3><ol>
<li><strong>递归终止条件：</strong> 当链表为空或者只有一个节点时，直接返回该节点。</li>
<li><strong>递归处理：</strong> 假设我们已经反转了 <code>head.next</code> 后面的部分，现在需要把当前节点 <code>head</code> 接到反转后的链表的末尾。</li>
<li><strong>调整指针：</strong> 将 <code>head.next.next</code> 指向 <code>head</code>，然后将 <code>head.next</code> 置为 <code>null</code>。</li>
<li><strong>返回新链表头：</strong> 每一层递归返回新的链表头。</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>以下是详细的 Java 代码实现，并附有注释解释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义链表节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="type">int</span> x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归终止条件：当链表为空或只有一个节点时，返回该节点</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归反转后续节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将当前节点连接到反转后的链表尾部</span></span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回新的链表头</span></span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solution</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建测试用链表：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反转链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">result</span> <span class="operator">=</span> solution.reverseList(head);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果链表</span></span><br><span class="line">        <span class="keyword">while</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(result.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            result = result.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出应该是：5 4 3 2 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h3><ol>
<li><p><strong>递归终止条件：</strong></p>
<ul>
<li><code>if (head == null || head.next == null) &#123; return head; &#125;</code><br>当链表为空或者只有一个节点时，直接返回当前节点。</li>
</ul>
</li>
<li><p><strong>递归处理：</strong></p>
<ul>
<li><code>ListNode newHead = reverseList(head.next);</code><br>递归反转从 <code>head.next</code> 开始的子链表，<code>newHead</code> 是反转后的新链表头。</li>
</ul>
</li>
<li><p><strong>调整指针：</strong></p>
<ul>
<li><code>head.next.next = head;</code> 将 <code>head</code> 接到反转后的链表末尾。</li>
<li><code>head.next = null;</code> 将当前节点的 <code>next</code> 指针置为空，避免形成环。</li>
</ul>
</li>
<li><p><strong>返回新链表头：</strong></p>
<ul>
<li><code>return newHead;</code> 返回新的链表头。</li>
</ul>
</li>
</ol>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul>
<li><strong>时间复杂度：</strong> O(n)。每个节点被访问一次。</li>
<li><strong>空间复杂度：</strong> O(n)。由于递归调用的栈深度为 <code>n</code>，需要 <code>O(n)</code> 的栈空间。</li>
</ul>
<h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p>假设链表为：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</p>
<ol>
<li><p>第一次递归：</p>
<ul>
<li>递归调用 <code>reverseList(2 -&gt; 3 -&gt; 4 -&gt; 5)</code></li>
<li>返回 <code>5 -&gt; 4 -&gt; 3 -&gt; 2</code></li>
</ul>
</li>
<li><p>第二次递归：</p>
<ul>
<li>递归调用 <code>reverseList(3 -&gt; 4 -&gt; 5)</code></li>
<li>返回 <code>5 -&gt; 4 -&gt; 3</code></li>
</ul>
</li>
<li><p>第三次递归：</p>
<ul>
<li>递归调用 <code>reverseList(4 -&gt; 5)</code></li>
<li>返回 <code>5 -&gt; 4</code></li>
</ul>
</li>
<li><p>第四次递归：</p>
<ul>
<li>递归调用 <code>reverseList(5)</code></li>
<li>返回 <code>5</code></li>
</ul>
</li>
<li><p>调整指针：</p>
<ul>
<li>将 <code>4</code> 指向 <code>3</code>，将 <code>3</code> 指向 <code>2</code>，将 <code>2</code> 指向 <code>1</code></li>
</ul>
</li>
</ol>
<p>最后返回反转后的链表头 <code>5</code>。</p>
<p>通过这种递归方法，我们可以有效地反转链表。递归方法利用了函数调用栈，代码简洁且易于理解。</p>
<p><img src="https://gitee.com/van14/image/raw/master/img/202407120424932.png" alt="image-20240712042419865"></p>
]]></content>
  </entry>
</search>
